#+TITLE: KMeans documentation
#+OPTIONS: ^:nil

* Pixel
** Struct
*** int r
Red value
*** int g
Green value
*** int b
Blue value
*** int id
The unique ID of the pixel
*** int ownedBy
The ID of the centroid which owns the pixel
*** int swapTo
ID of the centroid to be swapped to, otherwise -1
*** bool needsSwapped
True if the pixel is marked to be swapped, false otherwise

* Centroid
** Class
*** Private
**** int m_id
The unique ID of the centroid
**** std::vector<Pixel \ast{}> m_ownedPixels_ptr
A vector of pixel pointers which point to the pixel in the main pixelVector which this centroid owns
**** Pixel m_location
A pixel represeting this centroids current location in 3D space
*** Public
**** Centroid()
Default ructor
**** Centroid(std::vector<Pixel \ast{}> pixelVector_ptr)
ructs a Centroid with m_ownedPixels_ptr = pixelVector_ptr and calls updateLocation() immediately
**** int getID()
Returns m_id
**** int setID(int id)
sets m_id to id
**** std::vector<Pixel \ast{}> getOwnedPixels_ptr()
Returns m_ownedPixels_ptr
**** Pixel getLocation()
Returns m_location
**** void updateLocation()
Takes the average r, g, and b value of all pixels in m_ownedPixels_ptr and sets the r, g, and b values of m_location to the averages.
**** double distanceFromPixel(Pixel \ast{}pixel_ptr)
Returns the distance between m_location and \ast{}pixel_ptr using the euclidean distance function.
**** void addPixel(Pixel \ast{}pixel_ptr)
Adds \ast{}pixel_ptr to m_ownedPixels_ptr through the push_back() vector method
**** Pixel\ast{} releasePixel(int pixelIDp)
Removes the Pixel\ast{} with id pixelID from m_ownedPixels_ptr and returns it to the caller
If no pixel with id pixelID is found in m_ownedPixels_ptr, returns nullptr
**** Pixel\ast{} getPixelByID(int pixelID)
Return the Pixel\ast{} contained in m_ownedPixels_ptr with id pixelID. Return nullptr if no pixel is found.

* Image
** Functions
*** std::vector<Pixel> scanImage(cv::Mat image)
Read each pixel of an image in cv::Mat form and add the pixel to a vector. Return the vector to the caller
This is where pixels are assigned their id's
* KMeans
** Function
*** std::vector<Centroid> createCentroids( std::vector<Pixel> pixelVector, int k)
Create and returns a vector of centroids, each with pixelVector.size() / k pixels, with the leftover pixels from integer division being assigned to the last centroid in the vector.
*** void updateCentroidLocations(std::vector<Centroid> &centroidVector)
Calls updateLocation() on each centroid in the vector.
*** bool updateCentroidOwnership(std::vector<Centroid> & centroidVector,  const std::vector<Pixel> &pixelVector)
Loops through each pixel and checks its distance from each centroid. If the closest centroid does not own the pixel, mark the pixel for swapping.
*** bool updateCentroids(std::vector<Centroid> &centroidVector,  const std::vector<Pixel> &pixelVector)
Calls updateCentroidLocations() and updateCentroidOwnership() in that order. Returns true if any ownership changes take place, otherwise returns false.
**** We pass pixelVector by const reference to avoid copying the entire vector each time it's called (it holds over 2 million pixels with a 1080p image)
*** int smallestElement(double distances[], std::size_t size) 
Returns the index of the smallest elements of distances[]
*** void setSwap(Pixel\ast{} pixel_ptr, int centroidToSwapID)
*** void runSwaps(std::vector<Centroid> &centroidVector, const std::vector<Pixel> &pixelVector);
*** void swap(std::vector<Centroid> &centroidVector, Pixel\ast{} pixel_ptr)


