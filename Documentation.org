#+TITLE: KMeans documentation
#+OPTIONS: ^:nil

* Pixel
** Struct
*** int r
Red value
*** int g
Green value
*** int b
Blue value
*** int id
The unique ID of the pixel
*** int ownedBy
The ID of the centroid which owns the pixel
*** int swapTo
ID of the centroid to be swapped to, otherwise -1
*** bool needsSwapped
True if the pixel is marked to be swapped, false otherwise

* Centroid
** Class
*** Private
**** int m_id
The unique ID of the centroid
**** std::vector<Pixel \ast{}> m_ownedPixels_ptr
A vector of pixel pointers which point to the pixel in the main pixelVector which this centroid owns
**** Pixel m_location
A pixel represeting this centroids current location in 3D space
*** Public
**** Centroid()
Default constructor
**** Centroid(std::vector<Pixel \ast{}> pixelVector_ptr)
Constructs a Centroid with m_ownedPixels_ptr = pixelVector_ptr and calls updateLocation() immediately
**** int getID()
Returns m_id
**** std::vector<Pixel \ast{}> getOwnedPixels_ptr()
Returns m_ownedPixels_ptr
**** Pixel getLocation()
Returns m_location
**** void updateLocation()
Takes the average r, g, and b value of all pixels in m_ownedPixels_ptr and sets the r, g, and b values of m_location to the averages.
**** double distanceFromPixel(Pixel \ast{}pixel_ptr)
Returns the distance between m_location and \ast{}pixel_ptr using the euclidean distance function.
**** void addPixel(Pixel \ast{}pixel_ptr)
Adds \ast{}pixel_ptr to m_ownedPixels_ptr through the push_back() vector method
**** Pixel\ast{} releasePixel(int pixelIDp)
Removes the Pixel\ast{} with id pixelID from m_ownedPixels_ptr and returns it to the caller
If no pixel with id pixelID is found in m_ownedPixels_ptr, returns nullptr

* Image
** Functions
*** std::vector<Pixel> scanImage(cv::Mat image)
Read each pixel of an image in cv::Mat form and add the pixel to a vector. Return the vector to the caller
This is where pixels are assigned their id's
* KMeans

